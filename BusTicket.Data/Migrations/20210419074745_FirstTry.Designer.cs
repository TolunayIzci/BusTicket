// <auto-generated />
using System;
using BusTicket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusTicket.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210419074745_FirstTry")]
    partial class FirstTry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusTicket.Core.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Place = "İzmir"
                        },
                        new
                        {
                            Id = 2,
                            Place = "İstanbul"
                        },
                        new
                        {
                            Id = 3,
                            Place = "Ankara"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActivePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdditionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginLocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("OriginLocationId");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivePrice = 1m,
                            AdditionRate = 1m,
                            CreateTime = new DateTime(2021, 4, 19, 10, 47, 45, 87, DateTimeKind.Local).AddTicks(983),
                            CreateUserId = 2,
                            DestinationLocationId = 2,
                            OriginLocationId = 1,
                            Price = 100m,
                            SeatCapacity = 20,
                            SeatCount = 1,
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUserId = 0
                        },
                        new
                        {
                            Id = 2,
                            ActivePrice = 12m,
                            AdditionRate = 2m,
                            CreateTime = new DateTime(2021, 4, 19, 10, 47, 45, 88, DateTimeKind.Local).AddTicks(6454),
                            CreateUserId = 1,
                            DestinationLocationId = 1,
                            OriginLocationId = 2,
                            Price = 33m,
                            SeatCapacity = 20,
                            SeatCount = 3,
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUserId = 0
                        },
                        new
                        {
                            Id = 3,
                            ActivePrice = 13m,
                            AdditionRate = 3m,
                            CreateTime = new DateTime(2021, 4, 19, 10, 47, 45, 88, DateTimeKind.Local).AddTicks(6484),
                            CreateUserId = 3,
                            DestinationLocationId = 3,
                            OriginLocationId = 3,
                            Price = 44m,
                            SeatCapacity = 20,
                            SeatCount = 5,
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUserId = 0
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PassangerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PassangerSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal (18,2)");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("RouteId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2021, 4, 19, 10, 47, 45, 90, DateTimeKind.Local).AddTicks(76),
                            CreateUserId = 1,
                            IsActive = true,
                            PassangerName = "ali",
                            PassangerSurname = "kalem",
                            Price = 100m,
                            RouteId = 1,
                            SeatNumber = 1,
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUserId = 0
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2021, 4, 19, 10, 47, 45, 90, DateTimeKind.Local).AddTicks(1626),
                            CreateUserId = 2,
                            IsActive = true,
                            PassangerName = "mehmet",
                            PassangerSurname = "patates",
                            Price = 33m,
                            RouteId = 2,
                            SeatNumber = 3,
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUserId = 0
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2021, 4, 19, 10, 47, 45, 90, DateTimeKind.Local).AddTicks(1639),
                            CreateUserId = 3,
                            IsActive = true,
                            PassangerName = "ahmet",
                            PassangerSurname = "kağıt",
                            Price = 44m,
                            RouteId = 3,
                            SeatNumber = 5,
                            UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdateUserId = 0
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "1@mail",
                            Name = "ali",
                            Password = "123",
                            Surname = "kalem",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "2@mail",
                            Name = "mehmet",
                            Password = "123",
                            Surname = "patates",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "3@mail",
                            Name = "ahmet",
                            Password = "123",
                            Surname = "kağıt",
                            UserTypeId = 2
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "User"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Driver"
                        });
                });

            modelBuilder.Entity("BusTicket.Core.Models.Route", b =>
                {
                    b.HasOne("BusTicket.Core.Models.Location", "DestinationLocation")
                        .WithMany("DestinationRoutes")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusTicket.Core.Models.Location", "OriginLocation")
                        .WithMany("OriginRoutes")
                        .HasForeignKey("OriginLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DestinationLocation");

                    b.Navigation("OriginLocation");
                });

            modelBuilder.Entity("BusTicket.Core.Models.Ticket", b =>
                {
                    b.HasOne("BusTicket.Core.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusTicket.Core.Models.Route", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusTicket.Core.Models.User", b =>
                {
                    b.HasOne("BusTicket.Core.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("BusTicket.Core.Models.Location", b =>
                {
                    b.Navigation("DestinationRoutes");

                    b.Navigation("OriginRoutes");
                });

            modelBuilder.Entity("BusTicket.Core.Models.Route", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicket.Core.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("BusTicket.Core.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
